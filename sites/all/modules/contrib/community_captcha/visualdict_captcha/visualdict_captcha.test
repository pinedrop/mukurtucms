<?php

/**
 * @file
 * Tests for the Image-Recognition CAPTCHA module.
 */

/**
 * Customized CaptchaBaseWebTestCase for Image-Recognition CAPTCHA testing.
 *
 * Overrides setUp() to allow passing modules as a parameter to setUp(). This
 * is required to set up both the CAPTCHA and Image-Recognition CAPTCHA
 * modules.
 *
 * This version of setUp() is currently in CaptchaBaseWebTestCase in the HEAD
 * of the 7.x-1.x branch, but not yet in a CAPTCHA module release.
 *
 * @todo Remove this class when new CAPTCHA release made.
 */
class IrCaptchaCaptchaBaseWebTestCase extends CaptchaBaseWebTestCase {

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Load two modules: the captcha module itself and the comment module for
    // testing anonymous comments.
    $modules = func_get_args();
    if (isset($modules[0]) && is_array($modules[0])) {
      $modules = $modules[0];
    }
    DrupalWebTestCase::setUp(array_merge(array('captcha', 'comment'), $modules));
    module_load_include('inc', 'captcha');

    // Create a normal user.
    $permissions = array(
      'access comments', 'post comments', 'skip comment approval',
      'access content', 'create page content', 'edit own page content',
    );
    $this->normal_user = $this->drupalCreateUser($permissions);

    // Create an admin user.
    $permissions[] = 'administer CAPTCHA settings';
    $permissions[] = 'skip CAPTCHA';
    $permissions[] = 'administer permissions';
    $permissions[] = 'administer content types';
    $this->admin_user = $this->drupalCreateUser($permissions);

    // Put comments on page nodes on a separate page (default in D7: below
    // post).
    variable_set('comment_form_location_page', COMMENT_FORM_SEPARATE_PAGE);

  }

}


/**
 * Tests for Image-Recognition CAPTCHA.
 */
class IrCaptchaWebTestCase extends IrCaptchaCaptchaBaseWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Image-Recognition CAPTCHA',
      'description' => 'Tests basic Image-Recognition CAPTCHA functionality.',
      'group' => 'Image-Recognition CAPTCHA',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('visualdict_captcha');
    $this->installExampleImages();
  }

  /**
   * Installs example images included with module.
   */
  protected function installExampleImages() {
    $example_images_path = $this->getExampleImagesPath();
    $visualdict_captcha_images_path = $this->getIrCaptchaImagesPath();
    mkdir($visualdict_captcha_images_path);
    $image_filenames = $this->getExampleImageFilenames();
    foreach ($image_filenames as $image_filename) {
      $image_src_path = $example_images_path . '/' . $image_filename;
      $image_dst_path = $visualdict_captcha_images_path . '/' . $image_filename;
      copy($image_src_path, $image_dst_path);
    }
  }

  /**
   * Gets path to example images.
   *
   * @return string
   *   Absolute path of directory containing example images.
   */
  protected function getExampleImagesPath() {
    $module_path = drupal_get_path('module', 'visualdict_captcha');
    return drupal_realpath($module_path . '/example_images');
  }

  /**
   * Gets path to Image-Recognition CAPTCHA images directory.
   *
   * Images are "installed" when they are put into this directory.
   *
   * @return string
   *   Absolute path of Image-Recognition CAPTCHA images directory.
   */
  protected function getIrCaptchaImagesPath() {
    return drupal_realpath('public://visualdict_captcha/');
  }

  /**
   * Gets filenames of all example images.
   *
   * @return string[]
   *   Image filenames.
   */
  protected function getExampleImageFilenames() {
    module_load_include('inc', 'visualdict_captcha', 'visualdict_captcha.admin');
    $correct_filenames = _visualdict_captcha_get_correct_image_filenames();
    $incorrect_filenames = _visualdict_captcha_get_incorrect_image_filenames();
    return array_merge($correct_filenames, $incorrect_filenames);
  }

  /**
   * Tests basic Image-Recognition CAPTCHA functionality.
   */
  public function testIrCaptcha() {
    $this->setIrCaptchaOnUserRegistrationForm();
    $this->getUserRegisterPage();
    $this->solveIrCaptchaIncorrectly();
    $this->solveIrCaptchaCorrectly();
  }

  /**
   * Sets the Image-Recognition CAPTCHA to be shown on user registration form.
   */
  protected function setIrCaptchaOnUserRegistrationForm() {
    $this->setIrCaptchaOnForm('user_register_form');
  }

  /**
   * Sets Image-Recognition CAPTCHA to be shown on a form.
   *
   * @param string $form_id
   *   Form ID.
   */
  protected function setIrCaptchaOnForm($form_id) {
    $captcha_type = _visualdict_captcha_get_global_captcha_type();
    captcha_set_form_id_setting($form_id, $captcha_type);
  }

  /**
   * Gets user registration page.
   */
  protected function getUserRegisterPage() {
    $this->drupalGet('user/register');
    $this->assertCaptchaPresence(TRUE);
  }

  /**
   * Solves Image-Recognition CAPTCHA incorrectly.
   *
   * The CAPTCHA should still be present on the page retrieved after the
   * incorrect solution is submitted.
   */
  protected function solveIrCaptchaIncorrectly() {
    $correctly = FALSE;
    $this->solveIrCaptcha($correctly);
    $this->assertCaptchaPresence(TRUE);
  }

  /**
   * Solves Image-Recognition CAPTCHA correctly.
   *
   * The CAPTCHA should be absent from the page retrieved after the correct
   * solution is submitted.
   */
  protected function solveIrCaptchaCorrectly() {
    $correctly = TRUE;
    $this->solveIrCaptcha($correctly);
    $this->assertCaptchaPresence(FALSE);
  }

  /**
   * Solves Image-Recognition CAPTCHA either correctly or incorrectly.
   *
   * @param bool $correctly
   *   TRUE if the CAPTCHA should be solved correctly; otherwise, FALSE.
   */
  protected function solveIrCaptcha($correctly) {
    // Get filenames of images to indicate as CAPTCHA responses.
    module_load_include('inc', 'visualdict_captcha', 'visualdict_captcha.admin');
    if ($correctly) {
      // Solving the CAPTCHA correctly, use correct image filenames to choose
      // CAPTCHA responses.
      $response_filenames = _visualdict_captcha_get_correct_image_filenames();
    }
    else {
      // Not solving the CAPTCHA correctly, use incorrect image filenames to
      // choose CAPTCHA responses.
      $response_filenames = _visualdict_captcha_get_incorrect_image_filenames();
    }

    // Build $edit array with CAPTCHA responses.
    $edit = array();
    $imgs = $this->getIrCaptchaImages();
    foreach ($imgs as $i => $img) {
      $is_response = FALSE;
      foreach ($response_filenames as $response_filename) {
        if (strpos($img['src'], $response_filename) !== FALSE) {
          $is_response = TRUE;
          break;
        }
      }
      if ($is_response) {
        $edit["captcha_item_response_$i"] = 1;
      }
    }

    // POST response.
    $this->drupalPost(NULL, $edit, t("Create new account"));
  }

  /**
   * Gets Image-Recognition CAPTCHA img elements from page.
   *
   * @return SimpleXMLElement[]
   *   img elements
   */
  protected function getIrCaptchaImages() {
    return $this->xpath('//div[@class="visualdict-captcha-item-image"]/img');
  }

}
