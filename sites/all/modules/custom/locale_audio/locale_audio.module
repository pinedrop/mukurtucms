<?php

function locale_audio_menu_alter(&$items)
{
  $items['admin/config/regional/translate/edit/%']['page arguments'] = array('locale_audio_edit_form', 5);

  /*$items['admin/config/regional/translate/translate'] = array(
    'page callback' => 'locale_audio_seek_screen', // search results and form concatenated
  );*/
}

/*
function locale_audio_seek_screen() {
  // Add CSS.
  drupal_add_css(drupal_get_path('module', 'locale') . '/locale.css');

  $elements = drupal_get_form('locale_translation_filter_form');
  $output = drupal_render($elements);
  $output .= _locale_audio_seek();
  return $output;
}
*/

/**
 * User interface for string editing.
 */
function locale_audio_edit_form($form, &$form_state, $lid) {
  // Fetch source string, if possible.
  $source = db_query('SELECT source, context, textgroup, location FROM {locales_source} WHERE lid = :lid', array(':lid' => $lid))->fetchObject();
  if (!$source) {
    drupal_set_message(t('String not found.'), 'error');
    drupal_goto('admin/config/regional/translate/translate');
  }

  // Add original text to the top and some values for form altering.
  $form['original'] = array(
    '#type'  => 'item',
    '#title' => t('Original text'),
    '#markup' => check_plain(wordwrap($source->source, 0)),
  );
  if (!empty($source->context)) {
    $form['context'] = array(
      '#type' => 'item',
      '#title' => t('Context'),
      '#markup' => check_plain($source->context),
    );
  }
  $form['lid'] = array(
    '#type'  => 'value',
    '#value' => $lid
  );
  $form['textgroup'] = array(
    '#type'  => 'value',
    '#value' => $source->textgroup,
  );
  $form['location'] = array(
    '#type'  => 'value',
    '#value' => $source->location
  );

  // Include both translated and not yet translated target languages in the
  // list. The source language is English for built-in strings and the default
  // language for other strings.
  $languages = language_list();
  $default = language_default();
  $omit = $source->textgroup == 'default' ? 'en' : $default->language;
  unset($languages[($omit)]);
  $form['translations'] = array('#tree' => TRUE);
  $form['audio'] = array('#tree' => TRUE);
  $weight = 5;
  foreach ($languages as $langcode => $language) {
    $form['translations'][$langcode] = array(
      '#type' => 'textarea',
      '#title' => t($language->name),
      '#rows' => 5,
      '#resizable' => FALSE,
      '#weight' => $weight,
      '#default_value' => check_plain($source->source),
      '#description' => t('Keep, modify or translate the original text. You can associate an audio file with the text by dragging it into the box below.'),
      '#langcode' => $langcode,
    );
    /*$form['scald'][$langcode] = array(
      '#type' => 'textfield',
      '#title' => t($language->name . ': Audio'),
      '#size' => 120,
      '#weight' => $weight+1,
      '#langcode' => $langcode,
      '#default_value' => '',
      '#description' => t('Drag an audio atom from the Scald media library to associate it with this translation.'),
      '#ajax' => array(
        'callback' => 'locale_audio_player_callback',
        'wrapper' => 'locale-audio-translate-'.$langcode,
      ),
    );*/
    $form['audio'][$langcode] = array(
      '#weight' => $weight+2,
      '#title' => t($language->name . ': Audio'),
      '#prefix' => '<div id="locale-audio-'.$langcode.'"><div class="form-item">',
      '#markup' => '<div class="atom_reference_drop_zone" data-rendering-context="sdl_editor_representation">Drop an audio file from the Scald media library here</div>'.
                    '<input data-types="audio" data-dnd-context="sdl_editor_representation"/>',
      '#suffix' => '</div></div>',
    );
    $weight = $weight + 5;
  }

  $form['#attached']['library'][] = array('dnd', 'library');
  $form['#attached']['library'][] = array('atom_reference', 'library');

  // Fetch translations and fill in default values in the form.
  $result = db_query("SELECT DISTINCT translation, language FROM {locales_target} WHERE lid = :lid AND language <> :omit", array(':lid' => $lid, ':omit' => $omit));
  foreach ($result as $translation) {
    $form['translations'][$translation->language]['#default_value'] = $translation->translation;
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save translations'));
  return $form;
}

/*
function locale_audio_scald_callback($form, $form_state) {
  $langcode = $form_state['triggering_element']['#langcode'];
  $prefix = '<div id="locale-audio-'.$langcode.'">';
  $suffix = '</div>';
  $sas = $form_state['values']['translations'][$langcode];
  $scids = scald_included($sas);
  if (count($scids) > 0) {
    return $prefix."Scald  id = ".$scids[0]."<br/>".scald_sas_to_rendered($sas).$suffix;
  }
  return $prefix.scald_sas_to_rendered($sas).$suffix;
}
*/

/**
 * Validate string editing form submissions.
 */
function locale_audio_edit_form_validate($form, &$form_state) {
  // Locale string check is needed for default textgroup only.
  $safe_check_needed = $form_state['values']['textgroup'] == 'default';
  foreach ($form_state['values']['translations'] as $key => $value) {
    if ($safe_check_needed && !locale_string_is_safe($value)) {
      form_set_error('translations', t('The submitted string contains disallowed HTML: %string', array('%string' => $value)));
      watchdog('locale', 'Attempted submission of a translation string with disallowed HTML: %string', array('%string' => $value), WATCHDOG_WARNING);
    }
  }
}

/**
 * Process string editing form submissions.
 *
 * Saves all translations of one string submitted from a form.
 */
function locale_audio_edit_form_submit($form, &$form_state) {
  $lid = $form_state['values']['lid'];
  foreach ($form_state['values']['translations'] as $key => $value) {
    $translation = db_query("SELECT translation FROM {locales_target} WHERE lid = :lid AND language = :language", array(':lid' => $lid, ':language' => $key))->fetchField();
    if (!empty($value)) {
      $audio = $form_state['values']['audio'][$key];
      if (!empty($audio)) $value .= $audio;
      
      // Only update or insert if we have a value to use.
      if (is_string($translation)) {
        db_update('locales_target')
          ->fields(array(
            'translation' => $value,
          ))
          ->condition('lid', $lid)
          ->condition('language', $key)
          ->execute();
      }
      else {
        db_insert('locales_target')
          ->fields(array(
            'lid' => $lid,
            'translation' => $value,
            'language' => $key,
          ))
          ->execute();
      }
    }
    elseif (!empty($translation)) {
      // Empty translation entered: remove existing entry from database.
      db_delete('locales_target')
        ->condition('lid', $lid)
        ->condition('language', $key)
        ->execute();
    }

    // Force JavaScript translation file recreation for this language.
    _locale_invalidate_js($key);
  }

  drupal_set_message(t('The string has been saved.'));

  // Clear locale cache.
  _locale_invalidate_js();
  cache_clear_all('locale:', 'cache', TRUE);

  $form_state['redirect'] = 'admin/config/regional/translate/translate';
  return;
}
