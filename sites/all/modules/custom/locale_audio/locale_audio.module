<?php

function locale_audio_init() {
  static $done;

  // Prevent this function from running twice;
  if (!isset($done)) {
    $done = TRUE;
    drupal_add_js(array('locale_audio' => array(
      'iPlay' => variable_get('locale_audio_i_play', 'volume-up'),
      'iStop' => variable_get('locale_audio_i_stop', 'pause'),
    )), array('type' => 'setting'));
  }
}
function locale_audio_menu() {
    $items = array();

    $items['admin/config/regional/locale-audio'] = array(
      'title' => 'Locale Audio',
      'description' => 'Administer Locale Audio',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('locale_audio_admin'),
      'access arguments' => array('administer locale audio'),
      'file' => 'locale_audio.admin.inc',
    );
  $items['locale_audio/atom/%'] = array(
    'page callback' => 'locale_audio_atom_ajax', // Render HTML.
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'locale_audio_atom_ajax_callback',  // Magic goes here.
  );

  return $items;
}

function locale_audio_atom_ajax($sid) {
  return '<div data-atom-id="' .$sid. '">' .scald_render($sid, 'sdl_editor_representation') . '</div>';
}

function locale_audio_atom_ajax_callback($result) {
  print $result;
}

function locale_audio_menu_alter(&$items)
{
  //$items['admin/config/regional/translate/edit/%']['page arguments'] = array('locale_audio_edit_form', 5);
  //$items['admin/config/regional/translate/translate']['title'] = t('Translate/Audio');
  $items['admin/config/regional/translate/translate']['page callback'] = 'locale_audio_translate_seek_screen';
}

function locale_audio_translate_seek_screen() {
  // Add CSS.
  drupal_add_css(drupal_get_path('module', 'locale') . '/locale.css');

  $elements = drupal_get_form('locale_translation_filter_form');
  $output = drupal_render($elements);
  $output .= _locale_audio_translate_seek();
  return $output;
}

/**
 * Perform a string search and display results in a table
 */
function _locale_audio_translate_seek() {
  $output = '';

  // We have at least one criterion to match
  if (!($query = _locale_translate_seek_query())) {
    $query = array(
      'translation' => 'all',
      'group' => 'all',
      'language' => 'all',
      'string' => '',
    );
  }

  $sql_query = db_select('locales_source', 's');

  $limit_language = NULL;
  if ($query['language'] != 'en' && $query['language'] != 'all') {
    $sql_query->leftJoin('locales_target', 't', "t.lid = s.lid AND t.language = :langcode", array(':langcode' => $query['language']));
    $limit_language = $query['language'];
  }
  else {
    $sql_query->leftJoin('locales_target', 't', 't.lid = s.lid');
  }

  $sql_query->fields('s', array('source', 'location', 'context', 'lid', 'textgroup'));
  $sql_query->fields('t', array('translation', 'language'));

  // Compute LIKE section.
  switch ($query['translation']) {
    case 'audio':
      $sql_query->condition('t.translation', '%' . db_like($query['string']) . '%', 'LIKE')
        ->condition('t.translation', '%' . db_like('data-locale-audio=') . '%', 'LIKE');
      break;
    case 'translated':
      $sql_query->condition('t.translation', '%' . db_like($query['string']) . '%', 'LIKE')
        ->condition('t.translation', '%' . db_like('data-locale-audio=') . '%', 'NOT LIKE');
      break;
    case 'untranslated':
      $sql_query->condition(db_and()
        ->condition('s.source', '%' . db_like($query['string']) . '%', 'LIKE')
        ->isNull('t.translation')
      );
      $sql_query->orderBy('s.source');
      break;
    case 'all' :
    default:
      $condition = db_or()
        ->condition('s.source', '%' . db_like($query['string']) . '%', 'LIKE');
      if ($query['language'] != 'en') {
        // Only search in translations if the language is not forced to English.
        $condition->condition('t.translation', '%' . db_like($query['string']) . '%', 'LIKE');
      }
      $sql_query->condition($condition);
      break;
  }

  // Add a condition on the text group.
  if (!empty($query['group']) && $query['group'] != 'all') {
    $sql_query->condition('s.textgroup', $query['group']);
  }

  $sql_query = $sql_query->extend('PagerDefault')->limit(50);
  $locales = $sql_query->execute();

  $groups = module_invoke_all('locale', 'groups');
  $header = array(t('Text group'), t('String'), t('Context'), ($limit_language) ? t('Language') : t('Languages'), array('data' => t('Operations'), 'colspan' => '2'));

  $strings = array();
  foreach ($locales as $locale) {
    if (!isset($strings[$locale->lid])) {
      $strings[$locale->lid] = array(
        'group' => $locale->textgroup,
        'languages' => array(),
        'location' => $locale->location,
        'source' => $locale->source,
        'context' => $locale->context,
      );
    }
    if (isset($locale->language)) {
      $strings[$locale->lid]['languages'][$locale->language] = $locale->translation;
    }
  }

  $rows = array();
  foreach ($strings as $lid => $string) {
    $rows[] = array(
      $groups[$string['group']],
      array('data' => check_plain(truncate_utf8($string['source'], 150, FALSE, TRUE)) . '<br /><small>' . $string['location'] . '</small>'),
      $string['context'],
      array('data' => _locale_translate_language_list($string, $limit_language), 'align' => 'center'),
      array('data' => l(t('edit'), "admin/config/regional/translate/edit/$lid", array('query' => drupal_get_destination())), 'class' => array('nowrap')),
      array('data' => l(t('delete'), "admin/config/regional/translate/delete/$lid", array('query' => drupal_get_destination())), 'class' => array('nowrap')),
    );
  }

  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No strings available.')));
  $output .= theme('pager');

  return $output;
}

function locale_audio_form_locale_translation_filter_form_alter(&$form, &$form_state, $form_id) {
  $options = array(
    'all' => t('All strings'),
    'audio' => t('Translated strings with audio'),
    'translated' => t('Translated strings lacking audio'),
    'untranslated' => t('Strings lacking translations or audio'),
  );
  $form['filters']['status']['translation']['#options'] = $options;
  $form['filters']['status']['translation']['#empty_option'] = $options['all'];
}

function locale_audio_form_i18n_string_locale_translate_edit_form_alter(&$form, &$form_state, $form_id) {
  $lid = $form['lid']['#value'];
  // Fetch source string, if possible.
  $source = db_query('SELECT source, context, textgroup, location FROM {locales_source} WHERE lid = :lid', array(':lid' => $lid))->fetchObject();
  if (!$source) {
    drupal_set_message(t('String not found.'), 'error');
    drupal_goto('admin/config/regional/translate/translate');
  }
  $form['audio'] = array('#tree' => TRUE);
  $weight = 5;
  foreach ($form['translations'] as $langcode => $form_array) {
    $language = $form['translations'][$langcode]['#title'];
    $form['translations'][$langcode]['#title'] = $language.' - '.t('Text');
    $form['translations'][$langcode]['#default_value'] = check_plain($source->source);
    $form['translations'][$langcode]['#weight'] = $weight;
    $form['audio'][$langcode] = array(
      '#weight' => $weight+1,
      '#title' => $language.' - '.t('Audio'),
      '#type' => 'textfield',
      '#field_prefix' => '<div class="atom_reference_drop_zone" data-rendering-context="sdl_editor_representation">Drop an audio file from the Scald media library here</div>',
      '#attributes' => array('data-types' => array('audio'), 'data-dnd-context' => array('sdl_editor_representation')),
      '#description' => t('The audio in this box will be heard by users alongside the translated text for this language.'),
    );
    $weight = $weight + 5;
  }

  // Fetch translations and fill in default values in the form.
  $default = language_default();
  $omit = $source->textgroup == 'default' ? 'en' : $default->language;
  $result = db_query("SELECT DISTINCT translation, language FROM {locales_target} WHERE lid = :lid AND language <> :omit", array(':lid' => $lid, ':omit' => $omit));
  foreach ($result as $translation) {
    $annchar = json_decode('"\uFFF9"');
    $annsep = json_decode('"\uFFFA"');
    $annend = json_decode('"\uFFFB"');
    preg_match('/^' .$annchar. '(.*)' .$annsep. '(.*)' .$annend. '/', $translation->translation, $matches);
    //preg_match('/^<span class=[\'"]locale-audio[\'"]><(i|span).*data-locale-audio=[\'"](\d+)[\'"]><\/(i|span)><\/span>\s+(.*)$/', $translation->translation, $matches);
    if (count($matches) > 0) {
      $form['audio'][$translation->language]['#default_value'] = $matches[2];
      $form['audio'][$translation->language]['#field_prefix'] = '<div class="atom_reference_drop_zone" data-rendering-context="sdl_editor_representation">' .scald_render($matches[2], 'sdl_editor_representation'). '</div>';
      $form['translations'][$translation->language]['#default_value'] = $matches[1];
    }
    else {
      $form['translations'][$translation->language]['#default_value'] = $translation->translation;
    }
  }

  $form['#attached']['library'][] = array('dnd', 'library');
  $form['#attached']['library'][] = array('atom_reference', 'library');

  $form['#validate'][] = 'locale_audio_i18n_string_locale_translate_edit_form_validate';
}

function locale_audio_i18n_string_locale_translate_edit_form_validate($form, &$form_state)
{
  foreach ($form_state['values']['translations'] as $key => $value) {
    if (!empty($value)) {
      $audio = $form_state['values']['audio'][$key];
      if (!empty($audio)) {
        $value = json_decode('"\uFFF9"') . $value . json_decode('"\uFFFA"') . $audio . json_decode('"\uFFFB"');
        form_set_value($form['translations'][$key], $value, $form_state);
      }
    }
  }
}

function locale_audio_form_i18n_string_translate_page_form_alter(&$form, &$form_state, $form_id) {
  foreach ($form['strings'] as $group => $items) {
    foreach ($items as $key => $arr) {
      $form['audio'][$group][$key] = array(
        '#title' => t('Audio'),
        '#type' => 'textfield',
        '#default_value' => $key,
        '#field_prefix' => '<div class="atom_reference_drop_zone" data-rendering-context="sdl_editor_representation">Drop an audio file from the Scald media library here</div>',
        '#attributes' => array('data-types' => array('audio'), 'data-dnd-context' => array('sdl_editor_representation')),
        '#description' => t('The audio in this box will be heard by users alongside the translated text.'),
      );
    }
  }
  $form['#attached']['library'][] = array('dnd', 'library');
  $form['#attached']['library'][] = array('atom_reference', 'library');

  //$form['#validate'][] = 'locale_audio_i18n_string_translate_page_form_validate';
}

/*
function locale_audio_i18n_string_translate_page_form_validate($form, &$form_state)
{
  foreach ($form_state['values']['translations'] as $key => $value) {
    if (!empty($value)) {
      $audio = $form_state['values']['audio'][$key];
      if (!empty($audio)) {
        $value = json_decode('"\uFFF9"') . $value . json_decode('"\uFFFA"') . $audio . json_decode('"\uFFFB"');
        form_set_value($form['translations'][$key], $value, $form_state);
      }
    }
  }
}
*/
