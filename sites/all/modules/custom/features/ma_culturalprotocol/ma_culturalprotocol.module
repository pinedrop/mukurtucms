<?php
/**
 * @file
 * Code for the ma_culturalprotocol feature.
 */

include_once('ma_culturalprotocol.features.inc');

define('SIGNUP_PERM_FIELD', 'field_protocl_signup_permissions');

/**
 * Implements hook_user_insert().
 */
function ma_culturalprotocol_user_insert(&$edit, $account, $category) {
  // add the user to any protocols with the 'field_protocol_auto_join' set to 1
  $userid = $account->uid;

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'cultural_protocol_group')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_protocol_auto_join', 'value', '1')
    ->addMetaData('account', user_load(1)); // Run the query as user 1.

  $result = $query->execute();

  if (isset($result['node'])) {
    $item_nids = array_keys($result['node']);

    foreach ($item_nids as $protocol_nid) {
      _add_user_to_group($userid, $protocol_nid);
    }
  }
}

/**
 * Act on a user being added to a group
 *
 * If a user is added to a community, add them to the default protocol
 *
 * If the user is added to a protocol, add them to the parent community
 *
 * Implements hook_og_membership_presave().
 */
function ma_culturalprotocol_og_membership_presave(OgMembership $og_membership) {

	if ($og_membership->entity_type == 'user') {

		// if the membership state is active, check if there's an associated default community
		if ($og_membership->group_type == 'node' && !empty($og_membership->gid) && $og_membership->state == 1) {
		  $group_node = node_load($og_membership->gid);

		  if ($group_node->type == 'community') {

		    // add the user to the community's default protocol
		    $proto_nid = $og_membership->gid+1;
		    $protocol_node = node_load($proto_nid);
		    if ($protocol_node && $protocol_node->type == 'cultural_protocol_group' && !empty($protocol_node->og_group_ref) && $protocol_node->og_group_ref['und'][0]['target_id'] == $og_membership->gid) {
		      if (!isset($_SESSION['member_add_prevent_infinite_loop']['community_' . $group_node->nid . ':protocol_' . $proto_nid])) {
		        $user = user_load($og_membership->etid);
		        if (!og_is_member('node', $proto_nid, 'user', $user)) {
		          $_SESSION['member_add_prevent_infinite_loop']['community_' . $group_node->nid . ':protocol_' . $proto_nid] = TRUE;
		          _add_user_to_group($og_membership->etid, $proto_nid);
		          if (!isset($_SESSION['repress_user_add_messages'])) {
		            drupal_set_message(t('<i>' . $user->name . "</i> has been added to <i>" . $group_node->title . "</i>'s default Cultural Protocol <i>" . $protocol_node->title . '</i>'));
		          }
		        }
		      }
		      else {
		        unset ($_SESSION['member_add_prevent_infinite_loop']['community_' . $group_node->nid . ':protocol_' . $proto_nid]);
		      }
		    }

		    // if this is a child community, add the user to the parent community
		    if (isset($group_node->field_parent_community['und'][0]['target_id'])) {
		      $parent_community_node = node_load($group_node->field_parent_community['und'][0]['target_id']);
		      $user = user_load ($og_membership->etid);
		      if (!og_is_member ('node', $parent_community_node->nid, 'user', $user)) {
		        if ($parent_community_node->type == 'community') {
		          _add_user_to_group($og_membership->etid, $parent_community_node->nid);
		          if (!isset($_SESSION['repress_user_add_messages'])) {
		            drupal_set_message(t('<i>' . $user->name . '</i> has been added to the Parent Community <i>' . $parent_community_node->title . '</i>'));
		          }
		        }
		      }
		    }

		  }

		  else if ($group_node->type == 'cultural_protocol_group') {

		    // add the user to the cultural protocol's parent community
		    if (isset($group_node->og_group_ref['und'][0]['target_id'])) {
		      $community_node = node_load($group_node->og_group_ref['und'][0]['target_id']);
		      if (!isset($_SESSION['member_add_prevent_infinite_loop']['community_' . $community_node->nid . ':protocol_' . $group_node->nid])) {
		        $user = user_load($og_membership->etid);
		        if (!og_is_member('node', $community_node->nid, 'user', $user)) {
		          if ($community_node->type == 'community') {
		            $_SESSION['member_add_prevent_infinite_loop']['community_' . $community_node->nid . ':protocol_' . $group_node->nid] = TRUE;
		            _add_user_to_group($og_membership->etid, $community_node->nid);
		            if (!isset($_SESSION['repress_user_add_messages'])) {
		              drupal_set_message(t('<i>' . $user->name . "</i> has been added to <i>" . $group_node->title . "</i>'s Community <i>" . $community_node->title . '</i>'));
		            }
		          }
		        }
		      }
		      else {
		        unset ($_SESSION['member_add_prevent_infinite_loop']['community_' . $community_node->nid . ':protocol_' . $group_node->nid]);
		      }
		    }
		  }

		}
	}
}


/**
 * Implements hook_node_insert().
 */
function ma_culturalprotocol_node_insert($node) {
  if ($node->type == 'cultural_protocol_group') {
    _process_group_signup_permissions($node);
    _set_cp_steward_on_cp_create ($node);

    $cp_new = entity_metadata_wrapper('node', $node);
    _process_dh_dw_node_access ($cp_new);
  }
}

/**
 * Implements hook_node_update().
 */
function ma_culturalprotocol_node_update($node) {
  if ($node->type == 'cultural_protocol_group') {
    _process_group_signup_permissions($node);

    $cp_new = entity_metadata_wrapper('node', $node);
    if ($node->original) { // Even though we are in hook_update, there can be cases where this is empty
      $cp_old = entity_metadata_wrapper('node', $node->original);
    }
    _process_dh_dw_node_access ($cp_new, $cp_old);
  }
}


/**
 * Return if a cultural protocol is being referenced by nodes or atoms
 *
 * @param $node
 */
function _ma_culturalprotocol_is_active($node) {
    // Check nodes for CP references
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
        ->fieldCondition('og_group_ref', 'target_id', $node->nid)
        ->count();

    $results = intval($query->execute());

    // Check Scald atoms for CP references
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'scald_atom')
        ->fieldCondition('field_scald_protocol', 'target_id', $node->nid)
        ->count();

    $results += intval($query->execute());

    if($results > 0) {
        return true;
    }

    return false;
}

/**
 * Implements hook_node_access().
 */
function ma_culturalprotocol_node_access($node, $op, $account) {
    $type = is_string($node) ? $node : $node->type;

    if($type == 'cultural_protocol_group') {
        switch($op) {
        case 'create':
            // OG node_access doesn't know what to do for users with no community memberships yet.
            // This causes users like Language Stewards to be presented with the option to create protocols, which we don't want.
            // Here we explicitly check for the ability to create protocols
            if(!user_access('create cultural_protocol_group content')) {
                return NODE_ACCESS_DENY;
            }
            break;
        case 'delete':
            // Don't let a user delete a cultural protocol if it is being actively referenced
            if(_ma_culturalprotocol_is_active($node)) {
                return NODE_ACCESS_DENY;
            }
            break;
        }
    }
}


/**
 * Allows a single field to be used to select the type of non-member signups in a node
 *
 * @param $node
 */
function _process_group_signup_permissions($node) {

  // ** PART 1 - ensure the node has the permissions defaults set

  $gid = $node->nid;
  unset($node->is_new);
  $wrapper = entity_metadata_wrapper('node', $node);

  $signup_perm_value = $node->{SIGNUP_PERM_FIELD}['und'][0]['value'];  // open, private, moderated, default
  $og_perm_value = $node->og_roles_permissions['und'][0]['value'];

  if ($signup_perm_value == 'default') {
    if ($og_perm_value != 0) {
      $wrapper->og_roles_permissions->set(0);
      $wrapper->save();
    }

  } else {
    if ($og_perm_value != 1) {
      $wrapper->og_roles_permissions->set(1);
      $wrapper->save();
    }
  }

  // ** PART 2 - if defaults overriden then apply appropriate grants

  if (!isset($node->{SIGNUP_PERM_FIELD})) {
    return;
  }

  $signup_perm_value = $node->{SIGNUP_PERM_FIELD}['und'][0]['value'];  // open, private, moderated, default
  $default_access = og_is_group_default_access('node', $gid);

  if ($signup_perm_value != 'default' && !$default_access) {

    $roles = og_roles('node','cultural_protocol_group', $gid);
    $roles = array_flip($roles);

    switch ($signup_perm_value) {
      case 'private':
        // unset subscribe permission for non-member
        og_role_revoke_permissions($roles['non-member'], array('subscribe without approval'));
        og_role_revoke_permissions($roles['non-member'], array('subscribe'));
        break;
      case 'moderated':
        og_role_revoke_permissions($roles['non-member'], array('subscribe without approval'));
        og_role_grant_permissions($roles['non-member'], array('subscribe'));
        break;
      case 'open':
        // set subscribe-without-approval for nonmember
        og_role_grant_permissions($roles['non-member'], array('subscribe without approval'));
        break;
    }
  }
}

function _process_dh_dw_node_access ($cp_new, $cp_old = NULL) {
  if (!is_null($cp_old)) {
    if ($cp_old->group_access->value() == $cp_new->group_access->value()
      AND $cp_old->og_roles_permissions->value() == $cp_new->og_roles_permissions->value()
    ) {
      return; // No need to reprocess the DH/DW nodes if neither of these fields changed
    }
  }

  // DH items
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'digital_heritage')
    ->fieldCondition('og_group_ref', 'target_id', $cp_new->getIdentifier())
    ->execute();
  $dh_nids = empty($result['node']) ? array() : array_keys($result['node']);
  if (count($dh_nids)) {
    $dh_nodes_to_rebuid_and_reindex = variable_get('mukurtu_dh_nodes_to_rebuild_perms_and_reindex', array());
    $dh_nodes_to_rebuid_and_reindex = array_merge($dh_nodes_to_rebuid_and_reindex, $dh_nids);
    variable_set('mukurtu_dh_nodes_to_rebuild_perms_and_reindex', $dh_nodes_to_rebuid_and_reindex);
  }

  // DWs
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'dictionary_word')
    ->fieldCondition('og_group_ref', 'target_id', $cp_new->getIdentifier())
    ->execute();
  $dw_nids = empty($result['node']) ? array() : array_keys($result['node']);
  if (count($dw_nids)) {
    $dw_nodes_to_rebuid_and_reindex = variable_get('mukurtu_dw_nodes_to_rebuild_perms_and_reindex', array());
    $dw_nodes_to_rebuid_and_reindex = array_merge($dw_nodes_to_rebuid_and_reindex, $dw_nids);
    variable_set('mukurtu_dw_nodes_to_rebuild_perms_and_reindex', $dw_nodes_to_rebuid_and_reindex);
  }

}

function _set_cp_steward_on_cp_create($node) {
  global $user;
  $rid = array_search ('protocol steward', og_roles('node', 'cultural_protocol_group', $node->nid));
  og_role_grant('node', $node->nid, $user->uid, $rid);
}

/**
 * Helper function to add a user to a group
 *
 * @param $uid
 * @param $gid
 * @throws OgException
 */
function _add_user_to_group($uid, $gid) {

  watchdog ('mukurtu', 'adding user ' . $uid . ' to group ' . $gid);
  // Load the user we want to add to the group (ID #2 was my test user)
  $account = user_load($uid);

  $values = array(
    'entity_type' => 'user',
    'entity' => $account,
    'state' => OG_STATE_ACTIVE,
  );

  og_group('node', $gid, $values);

  // Changes the users role in the group (1 = non-member, 2 = member, 3 = administrator member)
//  og_role_grant($group->gid, $account->uid, 3);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ma_culturalprotocol_form_cultural_protocol_group_node_form_alter(&$form, &$form_state) {

  // Only show the Signup Permissions if the Sharing Protocol is open
  $form['field_protocl_signup_permissions']['#states'] = array(
    'visible' => array(
      ':input[name="group_access[und]"]' => array ('value' => '0'),
    ),
  );

  // 1, Only show communities for the group ref field
  // 2. Only show communities that the user is a Community Manager of OR that are already set on the field (eg. by a previous Protocol steward that is a Community Manager of a Community that the current Protocol Manager is not, so that it does not get unset)
  $communities_only = $form['og_group_ref'][LANGUAGE_NONE]['#options']['Community'];
  $default_values = $form['og_group_ref'][LANGUAGE_NONE]['#default_value'];
  foreach ($communities_only as $community_nid => $community_name) {
    $roles = og_get_user_roles('node', $community_nid);
    if (!in_array('community manager', $roles) && !in_array($community_nid, $default_values)) {
      unset ($communities_only[$community_nid]);
    }
  }
  $form['og_group_ref'][LANGUAGE_NONE]['#options'] = $communities_only;
}

/**
 * Implements hook_node_validate().
 */
function ma_culturalprotocol_node_validate($node, $form, &$form_state) {
  if ($node->type == 'cultural_protocol_group') {

    // Do not allow unsetting Parent Community for Communities that the user is not a Community Manager of
    $default_values = $form['og_group_ref'][LANGUAGE_NONE]['#default_value'];
    foreach ($default_values as $community_nid) {
      if (!in_array ($community_nid, $form['og_group_ref'][LANGUAGE_NONE]['#value'])) {
        $roles = og_get_user_roles('node', $community_nid);
        if (!in_array('community manager', $roles)) {
          $community = node_load ($community_nid);
          form_set_error ('og_group_ref', 'You cannot unset <i>' . $community->title . '</i> as a Parent Community because you are not one its Community Managers.');
        }
      }
    }
  }
}


/**
 * Helper function used both by for DH/DW custom protocol field and scald protocol field (default OG) to reduce down the available groups the user is a member of to those the user has posting permissions on, because OG on its own is not handling this
 */
function ma_cultural_protocol_get_cps_user_can_post_to($community_nid = NULL) {
  $groups_for_user = og_get_groups_by_user(null, 'node');
  $allowed_groups_for_user[] = array();
  foreach ($groups_for_user as $group_for_user) {
    $roles_for_user_in_group = og_get_user_roles('node', $group_for_user);
    if (array_intersect(array('contributor', 'protocol steward'), $roles_for_user_in_group)) {
      $allowed_groups_for_user[] = $group_for_user;
    }
  }

  // EFQ to get sub protocols for a community (or all if no community specified)
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'cultural_protocol_group')
    ->propertyCondition('status', NODE_PUBLISHED);
  if ($community_nid) {
    $query->fieldCondition('og_group_ref', 'target_id', $community_nid, '=');
  }

  $result = $query->execute();

  if (isset($result['node'])) {
    $protocol_items_nids = array_keys($result['node']);
    $protocol_items = entity_load('node', $protocol_items_nids);

    $cps = array();
    foreach ($protocol_items as $protocol_item) {
      if (in_array($protocol_item->nid, $allowed_groups_for_user)) {
        $cps[$protocol_item->nid] = $protocol_item->title;
      }
    }
    return $cps;
  }

}
